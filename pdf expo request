   public function historyindex(Request $request)
    {
        $data['data'] = MainWeightTable::orderBy('id', 'DESC')->get();

        if ($request->filled('export_type')) {
            $filename = 'historyIndex' . '-' . fdate(date('Y-m-d'), 'Y_m_d');

            $pdf = PDF::loadview('Weight.sale-pdf', $data, [], [
                'margin_header'         => 10,
                'margin_footer'         => 5,
                'mode'                  => 'utf-8',
                'format'                => 'A4-L',
                'orientation'           => 'L'
            ]);

            $pdf->getMpdf()->setFooter("{PAGENO} / {nb}");

            return $pdf->stream($filename . '.pdf');
        }

        // Pass $data to the view
        return view('Weight.historyIndex', $data);
    }





   <a href="{{ route('dokani.historyindex') }}?export_type=pdf&{{ http_build_query(request()->except('export_type', '_token')) }}"
                                            title="Pdf" target="_blank">
                                             <img src="{{ asset('assets/images/export-icons/pdf-icon.png') }}" alt="">
                                         </a>



=============================>
   if (request()->filled('export_type')) {

            $filename = 'Doctor_Appointment_' . fdate(request('from_date'), 'Y_m_d');
              $data['appointments']=$appointments->get();
            return $this->exportData($data, 'outdoors/appointment/export/', $filename);
        }


 public function exportData($data, $file_path, $filename)
    {
        set_time_limit(0);

        if (request('export_type') == 'export_pdf') {

            ini_set("pcre.backtrack_limit", "50000000");


            $pdf = PDF::loadview($file_path . request('export_type'), $data, [], [
                // 'format' => 'Legal-L',
                'margin_header' => 10,
                'margin_footer' => 5,
                'mode' => 'utf-8',
                'format' => 'A4-L',
                'orientation' => 'L'
            ]);

            $pdf->getMpdf()->setFooter("{PAGENO} / {nb}");

            return $pdf->stream($filename . '.pdf');
        }


        if (request('export_type') == 'export_excel') {

            $data['file_path'] = $file_path;

            return Excel::download(new ReportExportService($data), $filename . '.xlsx');
        }
    }




    <div class="pull-left" style="margin-top:10px; margin-left:10px">
                                            <a href="{{ url()->current() }}?export_type=export_excel&{{ request()->getQueryString() }}"
                                                target="_blank" style="margin-right: 5px">
                                                <img src="{{ asset('assets/images/export-icons/excel-icon.png') }}">
                                            </a>
                                            <a href="{{ url()->current() }}?export_type=export_pdf&{{ request()->getQueryString() }}"
                                                target="_blank" style="margin-right: 5px">
                                                <img src="{{ asset('assets/images/export-icons/pdf-icon.png') }}">
                                            </a>
                                        </div>
